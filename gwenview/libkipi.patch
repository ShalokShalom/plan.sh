From: Montel Laurent <montel@kde.org>
Date: Fri, 21 Nov 2014 12:25:53 +0000
Subject: Make it compile with libkipi
X-Git-Url: http://quickgit.kde.org/?p=gwenview.git&a=commitdiff&h=e6f3252dd006c88514cb2a638406f63a1ce014c5
---
Make it compile with libkipi
---


--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -59,6 +59,7 @@
 find_package(Exiv2)
 set_package_properties(EXIV2 PROPERTIES URL "http://www.exiv2.org" DESCRIPTION "image metadata support" TYPE REQUIRED)
 
+find_package(KF5Kipi)
 # macro_optional_find_package(Kipi)
 # set_package_properties(Kipi PROPERTIES URL"http://www.kipi-plugins.org" DESCRIPTION "Provides various image manipulation and export features" TYPE OPTIONAL)
 

--- a/app/CMakeLists.txt
+++ b/app/CMakeLists.txt
@@ -43,7 +43,7 @@
         )
 endif()
 
-if (KIPI_FOUND)
+if (KF5Kipi_FOUND)
     set (gwenview_SRCS
         ${gwenview_SRCS}
         kipiexportaction.cpp
@@ -82,8 +82,8 @@
 
 target_link_libraries(gwenview LINK_INTERFACE_LIBRARIES KF5::KIOCore Qt5::Core)
 
-if (KIPI_FOUND)
-    target_link_libraries(gwenview ${KIPI_LIBRARIES})
+if (KF5Kipi_FOUND)
+    target_link_libraries(gwenview KF5::Kipi)
 endif()
 
 install(TARGETS gwenview

--- a/app/kipiexportaction.cpp
+++ b/app/kipiexportaction.cpp
@@ -48,9 +48,9 @@
         menu->clear();
 
         if (mDefaultAction) {
-            menu->addTitle(i18n("Last Used Plugin"));
+            menu->addSection(i18n("Last Used Plugin"));
             menu->addAction(mDefaultAction);
-            menu->addTitle(i18n("Other Plugins"));
+            menu->addSection(i18n("Other Plugins"));
         }
         Q_FOREACH(QAction * action, mExportActionList) {
             action->setIconVisibleInMenu(true);

--- a/app/kipiinterface.cpp
+++ b/app/kipiinterface.cpp
@@ -33,6 +33,7 @@
 #include <QUrl>
 #include <KXMLGUIFactory>
 #include <KDirLister>
+#include <KLocalizedString>
 
 // KIPI
 #include <kipi/imagecollectionshared.h>
@@ -40,7 +41,7 @@
 #include <kipi/imageinfoshared.h>
 #include <kipi/plugin.h>
 #include <kipi/pluginloader.h>
-#include <kipi/version.h>
+//#include <kipi/version.h>
 
 // local
 #include "mainwindow.h"
@@ -75,7 +76,7 @@
 
         mAttributes.insert("name", url.fileName());
         mAttributes.insert("comment", comment());
-        mAttributes.insert("date", TimeUtils::dateTimeForFileItem(item).dateTime());
+        mAttributes.insert("date", TimeUtils::dateTimeForFileItem(item));
         mAttributes.insert("orientation", orientation());
         mAttributes.insert("title", prettyFileName());
         int size = item.size();
@@ -84,26 +85,6 @@
         }
     }
 
-#if (KIPI_VERSION < 0x020000)
-    QString name()
-    {
-        return mAttributes.value("name").toString();
-    }
-
-    QString description()
-    {
-        return mAttributes.value("comment").toString();
-    }
-
-    void setDescription(const QString&)
-    {}
-
-    int angle()
-    {
-        return mAttributes.value("angle").toInt();
-    }
-#endif
-
     QMap<QString, QVariant> attributes() {
         return mAttributes;
     }
@@ -152,6 +133,7 @@
 
     int orientation() const
     {
+#if 0 //PORT QT5
         KFileMetaInfo metaInfo(_url);
 
         if (!metaInfo.isValid()) {
@@ -186,8 +168,8 @@
             qWarning() << "Can't represent an orientation value of" << orientation << "as an angle (" << _url << ')';
             return 0;
         }
-
-        qWarning() << "Don't know how to handle an orientation value of" << orientation << '(' << _url << ')';
+#endif
+        //qWarning() << "Don't know how to handle an orientation value of" << orientation << '(' << _url << ')';
         return 0;
     }
 
@@ -232,7 +214,7 @@
     {
         QAction * action = new QAction(q);
         action->setText(text);
-        action->setShortcutConfigurable(false);
+        //PORT QT5 action->setShortcutConfigurable(false);
         action->setEnabled(false);
         return action;
     }
@@ -286,13 +268,9 @@
     d->mMenuInfoMap[KIPI::BatchPlugin]       = MenuInfo(i18nc("@title:menu", "Batch Processing"));
     d->mMenuInfoMap[KIPI::CollectionsPlugin] = MenuInfo(i18nc("@title:menu", "Collections"));
 
-#if (KIPI_VERSION >= 0x020000)
     d->mPluginLoader = new KIPI::PluginLoader();
     d->mPluginLoader->setInterface(this);
     d->mPluginLoader->init();
-#else
-    d->mPluginLoader = new KIPI::PluginLoader(QStringList(), this);
-#endif
     d->mPluginQueue = d->mPluginLoader->pluginList();
     d->mPluginMenu->addAction(d->mLoadingAction);
     loadOnePlugin();
