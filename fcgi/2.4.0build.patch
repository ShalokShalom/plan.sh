diff -ru fcgi-2.4.0-orig/configure.in fcgi-2.4.0/configure.in
--- fcgi-2.4.0-orig/configure.in	2003-01-19 18:19:41.000000000 +0100
+++ fcgi-2.4.0/configure.in	2007-03-05 20:48:14.000000000 +0100
@@ -4,11 +4,13 @@
 dnl     generate the file "configure", which is run during the build
 dnl     to configure the system for the local environment.
 
-AC_INIT
-AM_INIT_AUTOMAKE(fcgi, 2.4.0)
+AC_INIT(fcgi, 2.4.0)
+AM_INIT_AUTOMAKE(1.9 foreign)
 
 AM_CONFIG_HEADER(fcgi_config.h)
 
+AM_MAINTAINER_MODE
+
 AC_PROG_CC
 AC_PROG_CPP 
 AC_PROG_INSTALL 

diff -ru fcgi-2.4.0-orig/cgi-fcgi/Makefile.am fcgi-2.4.0/cgi-fcgi/Makefile.am
--- fcgi-2.4.0-orig/cgi-fcgi/Makefile.am	2007-03-05 18:09:31.000000000 +0100
+++ fcgi-2.4.0/cgi-fcgi/Makefile.am	2007-03-05 19:38:14.000000000 +0100
@@ -2,7 +2,7 @@
 bin_PROGRAMS     = cgi-fcgi
 
 INCLUDEDIR  = ../include
-CPPFLAGS    = @CPPFLAGS@ -I$(top_CACHE_PATH)/include
+AM_CPPFLAGS    = @CPPFLAGS@ -I$(top_CACHE_PATH)/include
 
 INCLUDE_FILES   = $(INCLUDEDIR)/fastcgi.h  \
 		  $(INCLUDEDIR)/fcgiapp.h  \
diff -ru fcgi-2.4.0-orig/examples/Makefile.am fcgi-2.4.0/examples/Makefile.am
--- fcgi-2.4.0-orig/examples/Makefile.am	2007-03-05 18:09:31.000000000 +0100
+++ fcgi-2.4.0/examples/Makefile.am	2007-03-05 19:38:34.000000000 +0100
@@ -11,7 +11,7 @@
 EXTRA_PROGRAMS = threaded echo-cpp
 
 INCLUDEDIR  = ../include
-CPPFLAGS    = @CPPFLAGS@ -I$(top_CACHE_PATH)/include
+AM_CPPFLAGS    = @CPPFLAGS@ -I$(top_CACHE_PATH)/include
 
 INCLUDE_FILES   = $(INCLUDEDIR)/fastcgi.h    \
                   $(INCLUDEDIR)/fcgiapp.h    \
diff -ru fcgi-2.4.0-orig/libfcgi/Makefile.am fcgi-2.4.0/libfcgi/Makefile.am
--- fcgi-2.4.0-orig/libfcgi/Makefile.am	2007-03-05 18:09:31.000000000 +0100
+++ fcgi-2.4.0/libfcgi/Makefile.am	2007-03-05 19:38:03.000000000 +0100
@@ -1,7 +1,7 @@
 # $Id: fcgi-2.4.0-Makefile.am-CPPFLAGS.patch,v 1.1 2007/06/28 23:15:26 till Exp $
 
 INCLUDEDIR  = ../include
-CPPFLAGS    = @CPPFLAGS@ -I$(top_CACHE_PATH)/include
+AM_CPPFLAGS    = @CPPFLAGS@ -I$(top_CACHE_PATH)/include
 
 INCLUDE_FILES = $(INCLUDEDIR)/fastcgi.h     \
                 $(INCLUDEDIR)/fcgiapp.h     \

diff --git a/libfcgi/os_unix.c b/libfcgi/os_unix.c
index 73e6a7f..af35aee 100755
--- a/libfcgi/os_unix.c
+++ b/libfcgi/os_unix.c
@@ -42,6 +42,7 @@ static const char rcsid[] = "$Id: os_unix.c,v 1.37 2002/03/05 19:14:49 robs Exp
 #include <sys/time.h>
 #include <sys/un.h>
 #include <signal.h>
+#include <poll.h>
 
 #ifdef HAVE_NETDB_H
 #include <netdb.h>
@@ -103,6 +104,9 @@ static int volatile maxFd = -1;
 static int shutdownPending = FALSE;
 static int shutdownNow = FALSE;
 
+static int libfcgiOsClosePollTimeout = 2000;
+static int libfcgiIsAfUnixKeeperPollTimeout = 2000;
+
 void OS_ShutdownPending()
 {
     shutdownPending = TRUE;
@@ -168,6 +172,16 @@ int OS_LibInit(int stdioFds[3])
     if(libInitialized)
         return 0;
 
+    char *libfcgiOsClosePollTimeoutStr = getenv( "LIBFCGI_OS_CLOSE_POLL_TIMEOUT" );
+    if(libfcgiOsClosePollTimeoutStr) {
+        libfcgiOsClosePollTimeout = atoi(libfcgiOsClosePollTimeoutStr);
+    }
+
+    char *libfcgiIsAfUnixKeeperPollTimeoutStr = getenv( "LIBFCGI_IS_AF_UNIX_KEEPER_POLL_TIMEOUT" );
+    if(libfcgiIsAfUnixKeeperPollTimeoutStr) {
+        libfcgiIsAfUnixKeeperPollTimeout = atoi(libfcgiIsAfUnixKeeperPollTimeoutStr);
+    }
+
     asyncIoTable = (AioInfo *)malloc(asyncIoTableSize * sizeof(AioInfo));
     if(asyncIoTable == NULL) {
         errno = ENOMEM;
@@ -755,19 +769,16 @@ int OS_Close(int fd)
 
     if (shutdown(fd, 1) == 0)
     {
-        struct timeval tv;
-        fd_set rfds;
+        struct pollfd pfd;
         int rv;
         char trash[1024];
 
-        FD_ZERO(&rfds);
+        pfd.fd = fd;
+        pfd.events = POLLIN;
 
         do 
         {
-            FD_SET(fd, &rfds);
-            tv.tv_sec = 2;
-            tv.tv_usec = 0;
-            rv = select(fd + 1, &rfds, NULL, NULL, &tv);
+            rv = poll(&pfd, 1, libfcgiOsClosePollTimeout);
         }
         while (rv > 0 && read(fd, trash, sizeof(trash)) > 0);
     }
@@ -1116,13 +1127,11 @@ static int is_reasonable_accept_errno (const int error)
  */
 static int is_af_unix_keeper(const int fd)
 {
-    struct timeval tval = { READABLE_UNIX_FD_DROP_DEAD_TIMEVAL };
-    fd_set read_fds;
-
-    FD_ZERO(&read_fds);
-    FD_SET(fd, &read_fds);
+    struct pollfd pfd;
+    pfd.fd = fd;
+    pfd.events = POLLIN;
 
-    return select(fd + 1, &read_fds, NULL, NULL, &tval) >= 0 && FD_ISSET(fd, &read_fds);
+    return poll(&pfd, 1, libfcgiIsAfUnixKeeperPollTimeout) >= 0 && (pfd.revents & POLLIN);
 }
 
 /*
